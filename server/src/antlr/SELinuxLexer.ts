// Generated from SELinux.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class SELinuxLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly WHITESPACE = 24;
	public static readonly NEWLINE = 25;
	public static readonly NUMBER = 26;
	public static readonly COMMENT = 27;
	public static readonly RIGHTPARENTHESIS = 28;
	public static readonly LEFTPARENTHESIS = 29;
	public static readonly RIGHTBRACKET = 30;
	public static readonly LEFTBRACKET = 31;
	public static readonly TEXT = 32;
	public static readonly FORWARDSLASH = 33;
	public static readonly SEMICOLON = 34;
	public static readonly BOOL = 35;
	public static readonly WORD = 36;
	public static readonly COMMA = 37;
	public static readonly BACKTICK = 38;
	public static readonly SINGLEQUOTE = 39;
	public static readonly AND = 40;
	public static readonly OR = 41;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'role'", "'types'", 
                                                   "'attribute_role'", "'roleattribute'", 
                                                   "'allow'", "'role_transition'", 
                                                   "':'", "'class'", "'dominance'", 
                                                   "'policy_module'", "'gen_require'", 
                                                   "'optional_policy'", 
                                                   "'gen_tunable'", "'tunable_policy'", 
                                                   "'interface'", "'template'", 
                                                   "'attribute'", "'typeattribute'", 
                                                   "'type'", "'alias'", 
                                                   "'typealias'", "'permissive'", 
                                                   "'bool'", null, null, 
                                                   null, null, "')'", "'('", 
                                                   "'}'", "'{'", null, "'/'", 
                                                   "';'", null, null, "','", 
                                                   "'`'", "'''", "'&&'", 
                                                   "'||'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, null, null, 
                                                    null, null, null, null, 
                                                    null, null, null, null, 
                                                    null, null, null, null, 
                                                    null, null, null, null, 
                                                    null, null, null, null, 
                                                    "WHITESPACE", "NEWLINE", 
                                                    "NUMBER", "COMMENT", 
                                                    "RIGHTPARENTHESIS", 
                                                    "LEFTPARENTHESIS", "RIGHTBRACKET", 
                                                    "LEFTBRACKET", "TEXT", 
                                                    "FORWARDSLASH", "SEMICOLON", 
                                                    "BOOL", "WORD", "COMMA", 
                                                    "BACKTICK", "SINGLEQUOTE", 
                                                    "AND", "OR" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "LOWERCASE", "UPPERCASE", 
		"WHITESPACE", "NEWLINE", "DIGIT", "NUMBER", "COMMENT", "RIGHTPARENTHESIS", 
		"LEFTPARENTHESIS", "RIGHTBRACKET", "LEFTBRACKET", "TEXT", "FORWARDSLASH", 
		"SEMICOLON", "BOOL", "WORD", "COMMA", "BACKTICK", "SINGLEQUOTE", "AND", 
		"OR",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, SELinuxLexer._ATN, SELinuxLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "SELinux.g4"; }

	public get literalNames(): (string | null)[] { return SELinuxLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return SELinuxLexer.symbolicNames; }
	public get ruleNames(): string[] { return SELinuxLexer.ruleNames; }

	public get serializedATN(): number[] { return SELinuxLexer._serializedATN; }

	public get channelNames(): string[] { return SELinuxLexer.channelNames; }

	public get modeNames(): string[] { return SELinuxLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,41,414,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,0,1,0,
	1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
	1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
	1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
	1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
	1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
	11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
	13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
	15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
	18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
	1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
	22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,4,26,
	328,8,26,11,26,12,26,329,1,26,1,26,1,27,1,27,1,28,4,28,337,8,28,11,28,12,
	28,338,1,28,1,28,4,28,343,8,28,11,28,12,28,344,3,28,347,8,28,1,29,1,29,
	5,29,351,8,29,10,29,12,29,354,9,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,
	31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
	1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,387,8,37,1,38,1,38,1,
	38,1,38,1,38,1,38,4,38,395,8,38,11,38,12,38,396,1,39,1,39,1,39,1,39,1,40,
	1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,0,0,44,1,1,3,2,5,
	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
	33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,0,49,0,51,24,53,25,55,0,57,
	26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,
	38,83,39,85,40,87,41,1,0,8,1,0,97,122,1,0,65,90,2,0,9,9,32,32,2,0,10,10,
	13,13,1,0,48,57,2,0,44,44,46,46,8,0,33,33,36,38,42,42,46,46,58,58,63,64,
	94,94,126,126,2,0,46,46,95,95,422,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
	7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
	0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
	1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
	0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,57,
	1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
	0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
	1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,
	0,3,94,1,0,0,0,5,100,1,0,0,0,7,115,1,0,0,0,9,129,1,0,0,0,11,135,1,0,0,0,
	13,151,1,0,0,0,15,153,1,0,0,0,17,159,1,0,0,0,19,169,1,0,0,0,21,183,1,0,
	0,0,23,195,1,0,0,0,25,211,1,0,0,0,27,223,1,0,0,0,29,238,1,0,0,0,31,248,
	1,0,0,0,33,257,1,0,0,0,35,267,1,0,0,0,37,281,1,0,0,0,39,286,1,0,0,0,41,
	292,1,0,0,0,43,302,1,0,0,0,45,313,1,0,0,0,47,318,1,0,0,0,49,320,1,0,0,0,
	51,322,1,0,0,0,53,327,1,0,0,0,55,333,1,0,0,0,57,336,1,0,0,0,59,348,1,0,
	0,0,61,357,1,0,0,0,63,359,1,0,0,0,65,363,1,0,0,0,67,367,1,0,0,0,69,371,
	1,0,0,0,71,373,1,0,0,0,73,375,1,0,0,0,75,386,1,0,0,0,77,394,1,0,0,0,79,
	398,1,0,0,0,81,402,1,0,0,0,83,406,1,0,0,0,85,408,1,0,0,0,87,411,1,0,0,0,
	89,90,5,114,0,0,90,91,5,111,0,0,91,92,5,108,0,0,92,93,5,101,0,0,93,2,1,
	0,0,0,94,95,5,116,0,0,95,96,5,121,0,0,96,97,5,112,0,0,97,98,5,101,0,0,98,
	99,5,115,0,0,99,4,1,0,0,0,100,101,5,97,0,0,101,102,5,116,0,0,102,103,5,
	116,0,0,103,104,5,114,0,0,104,105,5,105,0,0,105,106,5,98,0,0,106,107,5,
	117,0,0,107,108,5,116,0,0,108,109,5,101,0,0,109,110,5,95,0,0,110,111,5,
	114,0,0,111,112,5,111,0,0,112,113,5,108,0,0,113,114,5,101,0,0,114,6,1,0,
	0,0,115,116,5,114,0,0,116,117,5,111,0,0,117,118,5,108,0,0,118,119,5,101,
	0,0,119,120,5,97,0,0,120,121,5,116,0,0,121,122,5,116,0,0,122,123,5,114,
	0,0,123,124,5,105,0,0,124,125,5,98,0,0,125,126,5,117,0,0,126,127,5,116,
	0,0,127,128,5,101,0,0,128,8,1,0,0,0,129,130,5,97,0,0,130,131,5,108,0,0,
	131,132,5,108,0,0,132,133,5,111,0,0,133,134,5,119,0,0,134,10,1,0,0,0,135,
	136,5,114,0,0,136,137,5,111,0,0,137,138,5,108,0,0,138,139,5,101,0,0,139,
	140,5,95,0,0,140,141,5,116,0,0,141,142,5,114,0,0,142,143,5,97,0,0,143,144,
	5,110,0,0,144,145,5,115,0,0,145,146,5,105,0,0,146,147,5,116,0,0,147,148,
	5,105,0,0,148,149,5,111,0,0,149,150,5,110,0,0,150,12,1,0,0,0,151,152,5,
	58,0,0,152,14,1,0,0,0,153,154,5,99,0,0,154,155,5,108,0,0,155,156,5,97,0,
	0,156,157,5,115,0,0,157,158,5,115,0,0,158,16,1,0,0,0,159,160,5,100,0,0,
	160,161,5,111,0,0,161,162,5,109,0,0,162,163,5,105,0,0,163,164,5,110,0,0,
	164,165,5,97,0,0,165,166,5,110,0,0,166,167,5,99,0,0,167,168,5,101,0,0,168,
	18,1,0,0,0,169,170,5,112,0,0,170,171,5,111,0,0,171,172,5,108,0,0,172,173,
	5,105,0,0,173,174,5,99,0,0,174,175,5,121,0,0,175,176,5,95,0,0,176,177,5,
	109,0,0,177,178,5,111,0,0,178,179,5,100,0,0,179,180,5,117,0,0,180,181,5,
	108,0,0,181,182,5,101,0,0,182,20,1,0,0,0,183,184,5,103,0,0,184,185,5,101,
	0,0,185,186,5,110,0,0,186,187,5,95,0,0,187,188,5,114,0,0,188,189,5,101,
	0,0,189,190,5,113,0,0,190,191,5,117,0,0,191,192,5,105,0,0,192,193,5,114,
	0,0,193,194,5,101,0,0,194,22,1,0,0,0,195,196,5,111,0,0,196,197,5,112,0,
	0,197,198,5,116,0,0,198,199,5,105,0,0,199,200,5,111,0,0,200,201,5,110,0,
	0,201,202,5,97,0,0,202,203,5,108,0,0,203,204,5,95,0,0,204,205,5,112,0,0,
	205,206,5,111,0,0,206,207,5,108,0,0,207,208,5,105,0,0,208,209,5,99,0,0,
	209,210,5,121,0,0,210,24,1,0,0,0,211,212,5,103,0,0,212,213,5,101,0,0,213,
	214,5,110,0,0,214,215,5,95,0,0,215,216,5,116,0,0,216,217,5,117,0,0,217,
	218,5,110,0,0,218,219,5,97,0,0,219,220,5,98,0,0,220,221,5,108,0,0,221,222,
	5,101,0,0,222,26,1,0,0,0,223,224,5,116,0,0,224,225,5,117,0,0,225,226,5,
	110,0,0,226,227,5,97,0,0,227,228,5,98,0,0,228,229,5,108,0,0,229,230,5,101,
	0,0,230,231,5,95,0,0,231,232,5,112,0,0,232,233,5,111,0,0,233,234,5,108,
	0,0,234,235,5,105,0,0,235,236,5,99,0,0,236,237,5,121,0,0,237,28,1,0,0,0,
	238,239,5,105,0,0,239,240,5,110,0,0,240,241,5,116,0,0,241,242,5,101,0,0,
	242,243,5,114,0,0,243,244,5,102,0,0,244,245,5,97,0,0,245,246,5,99,0,0,246,
	247,5,101,0,0,247,30,1,0,0,0,248,249,5,116,0,0,249,250,5,101,0,0,250,251,
	5,109,0,0,251,252,5,112,0,0,252,253,5,108,0,0,253,254,5,97,0,0,254,255,
	5,116,0,0,255,256,5,101,0,0,256,32,1,0,0,0,257,258,5,97,0,0,258,259,5,116,
	0,0,259,260,5,116,0,0,260,261,5,114,0,0,261,262,5,105,0,0,262,263,5,98,
	0,0,263,264,5,117,0,0,264,265,5,116,0,0,265,266,5,101,0,0,266,34,1,0,0,
	0,267,268,5,116,0,0,268,269,5,121,0,0,269,270,5,112,0,0,270,271,5,101,0,
	0,271,272,5,97,0,0,272,273,5,116,0,0,273,274,5,116,0,0,274,275,5,114,0,
	0,275,276,5,105,0,0,276,277,5,98,0,0,277,278,5,117,0,0,278,279,5,116,0,
	0,279,280,5,101,0,0,280,36,1,0,0,0,281,282,5,116,0,0,282,283,5,121,0,0,
	283,284,5,112,0,0,284,285,5,101,0,0,285,38,1,0,0,0,286,287,5,97,0,0,287,
	288,5,108,0,0,288,289,5,105,0,0,289,290,5,97,0,0,290,291,5,115,0,0,291,
	40,1,0,0,0,292,293,5,116,0,0,293,294,5,121,0,0,294,295,5,112,0,0,295,296,
	5,101,0,0,296,297,5,97,0,0,297,298,5,108,0,0,298,299,5,105,0,0,299,300,
	5,97,0,0,300,301,5,115,0,0,301,42,1,0,0,0,302,303,5,112,0,0,303,304,5,101,
	0,0,304,305,5,114,0,0,305,306,5,109,0,0,306,307,5,105,0,0,307,308,5,115,
	0,0,308,309,5,115,0,0,309,310,5,105,0,0,310,311,5,118,0,0,311,312,5,101,
	0,0,312,44,1,0,0,0,313,314,5,98,0,0,314,315,5,111,0,0,315,316,5,111,0,0,
	316,317,5,108,0,0,317,46,1,0,0,0,318,319,7,0,0,0,319,48,1,0,0,0,320,321,
	7,1,0,0,321,50,1,0,0,0,322,323,7,2,0,0,323,324,1,0,0,0,324,325,6,25,0,0,
	325,52,1,0,0,0,326,328,7,3,0,0,327,326,1,0,0,0,328,329,1,0,0,0,329,327,
	1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,6,26,1,0,332,54,1,0,0,0,
	333,334,7,4,0,0,334,56,1,0,0,0,335,337,3,55,27,0,336,335,1,0,0,0,337,338,
	1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,346,1,0,0,0,340,342,7,5,0,0,
	341,343,3,55,27,0,342,341,1,0,0,0,343,344,1,0,0,0,344,342,1,0,0,0,344,345,
	1,0,0,0,345,347,1,0,0,0,346,340,1,0,0,0,346,347,1,0,0,0,347,58,1,0,0,0,
	348,352,5,35,0,0,349,351,8,3,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,
	1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,6,29,0,
	0,356,60,1,0,0,0,357,358,5,41,0,0,358,62,1,0,0,0,359,360,5,40,0,0,360,361,
	1,0,0,0,361,362,6,31,0,0,362,64,1,0,0,0,363,364,5,125,0,0,364,365,1,0,0,
	0,365,366,6,32,0,0,366,66,1,0,0,0,367,368,5,123,0,0,368,369,1,0,0,0,369,
	370,6,33,0,0,370,68,1,0,0,0,371,372,7,6,0,0,372,70,1,0,0,0,373,374,5,47,
	0,0,374,72,1,0,0,0,375,376,5,59,0,0,376,74,1,0,0,0,377,378,5,116,0,0,378,
	379,5,114,0,0,379,380,5,117,0,0,380,387,5,101,0,0,381,382,5,102,0,0,382,
	383,5,97,0,0,383,384,5,108,0,0,384,385,5,115,0,0,385,387,5,101,0,0,386,
	377,1,0,0,0,386,381,1,0,0,0,387,76,1,0,0,0,388,395,3,47,23,0,389,395,3,
	49,24,0,390,395,3,55,27,0,391,395,3,57,28,0,392,395,3,69,34,0,393,395,7,
	7,0,0,394,388,1,0,0,0,394,389,1,0,0,0,394,390,1,0,0,0,394,391,1,0,0,0,394,
	392,1,0,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,397,1,0,
	0,0,397,78,1,0,0,0,398,399,5,44,0,0,399,400,1,0,0,0,400,401,6,39,0,0,401,
	80,1,0,0,0,402,403,5,96,0,0,403,404,1,0,0,0,404,405,6,40,0,0,405,82,1,0,
	0,0,406,407,5,39,0,0,407,84,1,0,0,0,408,409,5,38,0,0,409,410,5,38,0,0,410,
	86,1,0,0,0,411,412,5,124,0,0,412,413,5,124,0,0,413,88,1,0,0,0,9,0,329,338,
	344,346,352,386,394,396,2,6,0,0,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SELinuxLexer.__ATN) {
			SELinuxLexer.__ATN = new ATNDeserializer().deserialize(SELinuxLexer._serializedATN);
		}

		return SELinuxLexer.__ATN;
	}


	static DecisionsToDFA = SELinuxLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}